name: CI/CD - DTM App on EKS 

on:
  push:
    branches: [ master ]

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: dtm-cluster
  REGISTRY: docker.io
  REPO: yakiradela
  KUBECONFIG: /home/runner/.kube/config

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    ####################################################################
    # שלב 1: Clone והרשאות AWS
    ####################################################################
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    ####################################################################
    # שלב 2: התקנת כלים - kubectl + helm
    ####################################################################
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin

    - name: Verify kubectl
      run: kubectl version --client

    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Verify Helm
      run: helm version

    ####################################################################
    # שלב 3: Terraform - יצירת תשתית (VPC, EKS, RDS)
    ####################################################################
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Bootstrap
      working-directory: distributed-task-manager/infra/boostrap
      run: |
        terraform init
        terraform apply -auto-approve -var="aws_region=${{ env.AWS_REGION }}"

    - name: Terraform Apply Infra
      working-directory: distributed-task-manager/infra
      run: |
        terraform init
        terraform apply -auto-approve -target=module.vpc -target=module.eks -target=module.rds

    ####################################################################
    # שלב 4: התחברות לקלאסטר EKS
    ####################################################################
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

    - name: Verify Cluster Access
      run: |
        kubectl get nodes
        kubectl config current-context

    ####################################################################
    # שלב 5: Build & Push Docker Images
    ####################################################################
    - name: Docker Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Microservice Images
      run: |
        set -e
        for service in api-gateway tasks-service users-service; do
          echo "Building and pushing $service..."
          docker build -t $REGISTRY/$REPO/$service:latest ./distributed-task-manager/services/$service
          docker push $REGISTRY/$REPO/$service:latest
        done

    ####################################################################
    # שלב 6: פריסה עם Helm
    ####################################################################
    - name: Create Namespace (if not exists)
      run: |
        kubectl get namespace distributed-task-manager || kubectl create namespace distributed-task-manager

    - name: Deploy Microservices with Helm
      run: |
        for service in api-gateway tasks-service users-service; do
          echo "Deploying $service..."
          helm upgrade --install $service \
            ./charts/$service \
            --values ./charts/$service/values.yaml \
            --namespace distributed-task-manager
        done

    - name: Deploy MongoDB via Helm
      run: |
        echo "Deploying MongoDB..."
        helm upgrade --install mongodb ./charts/mongodb --namespace distributed-task-manager

    - name: Deploy Monitoring Stack (Grafana + Prometheus)
      run: |
        echo "Deploying monitoring stack..."
        helm upgrade --install monitoring ./charts/grafana-prometheus --namespace distributed-task-manager

    ####################################################################
    # שלב 7: משאבי K8s נוספים
    ####################################################################
    - name: Apply Vault Agent Config
      run: |
        kubectl apply -f distributed-task-manager/k8s/vault-agent-config.yaml

    - name: Apply Ingress Rules
      run: |
        kubectl apply -f distributed-task-manager/k8s/ingress.yaml

    ####################################################################
    # שלב 8: בדיקות והדפסה
    ####################################################################
    - name: List Helm Releases
      run: |
        helm list -n distributed-task-manager

    - name: Get All K8s Resources
      run: |
        kubectl get all -n distributed-task-manager
