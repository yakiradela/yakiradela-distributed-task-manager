name: CI/CD - DTM App on EKS

on: 
  push:
    branches: [ master ]

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: dtm-cluster
  REGISTRY: docker.io
  REPO: yakiradela

jobs:
  deploy:
    name: Full Deployment Pipeline
    runs-on: ubuntu-latest

    steps:
      ####################################################################
      # שלב 1: Clone הקוד והגדרת הרשאות
      ####################################################################
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      ####################################################################
      # שלב 2: התקנת Terraform והרצת bootstrap/init/apply
      ####################################################################
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Bootstrap
        working-directory: distributed-task-manager/infra/boostrap
        run: |
          terraform init
          terraform apply -auto-approve -var="aws_region=${{ env.AWS_REGION }}"

      - name: Terraform Init & Apply Infra
        working-directory: distributed-task-manager/infra
        run: |
          terraform init
          terraform apply -auto-approve -var-file=terraform.tfvars

      ####################################################################
      # שלב 3: בניית תמונות Docker ודחיפה ל-Docker Hub
      ####################################################################
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Images
        run: |
          for service in api-gateway tasks-service users-service; do
            docker build -t ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/$service:latest ./distributed-task-manager/services/$service
            docker push ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/$service:latest
          done

      ####################################################################
      # שלב 4: התקנת kubectl והתחברות ל-EKS
      ####################################################################
      - name: Install kubectl (v1.29.0)
        run: |
          curl -LO "https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Install yq (YAML processor)
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Patch aws-auth ConfigMap to add IAM User
        run: |
          kubectl get configmap aws-auth -n kube-system -o yaml > aws-auth.yaml

          if grep -q "mapUsers" aws-auth.yaml; then
            if grep -q "${{ env.IAM_USER_ARN }}" aws-auth.yaml; then
              echo "User already present in aws-auth"
            else
              echo "Adding user to mapUsers"
              yq eval ".data.mapUsers |= . + \"- userarn: ${{ env.IAM_USER_ARN }}\n  username: yakiradela\n  groups:\n    - system:masters\n\"" -i aws-auth.yaml
              kubectl apply -f aws-auth.yaml
            fi
          else
            echo "mapUsers section not found, creating with user"
            yq eval ".data.mapUsers = \"- userarn: ${{ env.IAM_USER_ARN }}\n  username: yakiradela\n  groups:\n    - system:masters\n\"" -i aws-auth.yaml
            kubectl apply -f aws-auth.yaml
          fi

          echo "aws-auth ConfigMap after patch:"
          kubectl get configmap aws-auth -n kube-system -o yaml

      - name: Test cluster connection (debug)
        run: kubectl get nodes

      ####################################################################
      # שלב 5: התקנת Helm ופריסת microservices
      ####################################################################
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Deploy Microservices with Helm
        run: |
          for service in api-gateway tasks-service users-service; do
            helm upgrade --install $service \
              ./charts/$service \
              --values ./charts/$service/values.yaml \
              --namespace distributed-task-manager --create-namespace
          done

      ####################################################################
      # שלב 6: פריסת שירותים משותפים (Vault, MongoDB, Monitoring)
      ####################################################################
      - name: Create Namespace
        run: kubectl apply -f distributed-task-manager/k8s/namespace.yaml

      - name: Apply Vault Agent Config
        run: kubectl apply -f distributed-task-manager/k8s/vault-agent-config.yaml

      - name: Deploy MongoDB
        run: helm upgrade --install mongodb ./charts/mongodb --namespace distributed-task-manager

      - name: Deploy Monitoring (Grafana + Prometheus)
        run: helm upgrade --install monitoring ./charts/grafana-prometheus --namespace distributed-task-manager

      - name: Apply Ingress Rules
        run: kubectl apply -f distributed-task-manager/k8s/ingress.yaml
