name: CI/CD - DTM App on EKS

on:
  push:
    branches: [ master ]

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: dtm-cluster
  REGISTRY: docker.io
  REPO: yakiradela
  KUBECONFIG: /home/runner/.kube/config

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    ####################################################################
    # שלב 1: Clone והרשאות AWS
    ####################################################################
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    ####################################################################
    # שלב 2: Terraform - יצירת תשתית
    ####################################################################
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Bootstrap
      working-directory: distributed-task-manager/infra/boostrap
      run: |
        terraform init
        terraform apply -auto-approve -var="aws_region=${{ env.AWS_REGION }}"

    - name: Terraform Apply Infra (modules.vpc + modules.eks)
      working-directory: distributed-task-manager/infra
      run: |
        terraform init
        terraform apply -auto-approve -target=module.vpc -target=module.eks

    ####################################################################
    # שלב 3: Docker Build & Push
    ####################################################################
    - name: Docker Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Microservice Images
      run: |
        for service in api-gateway tasks-service users-service; do
          docker build -t $REGISTRY/$REPO/$service:latest ./distributed-task-manager/services/$service
          docker push $REGISTRY/$REPO/$service:latest
        done

    ####################################################################
    # שלב 4: התקנת כלים - eksctl ו-helm
    ####################################################################
    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin

    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    ####################################################################
    # שלב 5: התחברות לקלאסטר עם eksctl
    ####################################################################
    - name: Configure kubeconfig using eksctl
      run: |
        eksctl utils write-kubeconfig --region $AWS_REGION --cluster $CLUSTER_NAME

    ####################################################################
    # שלב 6: אימות מול הקלאסטר עם eksctl + kubectl
    ####################################################################
    - name: Verify cluster access using eksctl and kubectl
      run: |
        eksctl utils write-kubeconfig --region $AWS_REGION --cluster $CLUSTER_NAME

        echo "=== EKS Cluster Info ==="
        eksctl get cluster --region $AWS_REGION --name $CLUSTER_NAME

        echo "=== Nodegroups ==="
        eksctl get nodegroup --cluster $CLUSTER_NAME --region $AWS_REGION

        echo "=== Kubeconfig Context ==="
        kubectl config current-context

        echo "=== Nodes ==="
        kubectl get nodes

    ####################################################################
    # שלב 7: פריסת מיקרו-שירותים עם Helm
    ####################################################################
    - name: Deploy Microservices with Helm
      run: |
        for service in api-gateway tasks-service users-service; do
          helm upgrade --install $service \
            ./charts/$service \
            --values ./charts/$service/values.yaml \
            --namespace distributed-task-manager --create-namespace
        done

    - name: Apply Vault Agent Config
      run: |
        kubectl apply -f distributed-task-manager/k8s/vault-agent-config.yaml

    - name: Deploy MongoDB via Helm
      run: |
        helm upgrade --install mongodb ./charts/mongodb --namespace distributed-task-manager

    - name: Deploy Monitoring via Helm
      run: |
        helm upgrade --install monitoring ./charts/grafana-prometheus --namespace distributed-task-manager

    ####################################################################
    # שלב 8: הגדרת Ingress
    ####################################################################
    - name: Apply Ingress Rules
      run: |
        kubectl apply -f distributed-task-manager/k8s/ingress.yaml
